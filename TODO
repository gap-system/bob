> Define BOB_statusses
> Use for GAP component
> Sorted lookup for Tests.
> Use for IO component
> Same setup for Components.
> Setup autoconf/automake
> Implement getopt and structure using getopt
> setup environment infrastructure
> Design logging infrastructure
> Develop skeleton
> Implement BOB::which
> Implement test for C compiler
> Implement BOB::get using libcurl
> Implement BOB::getindirectly without checksumming
> Implement BOB::sh
> Implement BOB::untar using libarchive and zlib
> Implement -v echoing of building stuff
> Implement -static
> Implement test for architecture
> Implement 64bit/32bit distinction
> Implement more packages
> Implement checksumming using libssl
> Implement BOB::getindirectly with checksummming using libssl
> Test on OSX
> Automatic downloading of libraries as dependencies?
> Sort out local usage of libs
> Sort out download/get/getind/downloadname
> Test for bash?
> test for updates/version number
> Recognition for 64-bit/32-bit
> Actually implement proper GAP compiling --> Need to do packages 64/32
> Say which archive we got.
> Put entry into build.log as to what component is being done
> Write a help page as manual
> Add gmp again
> Allow for 32-bit compile of bzip2-lib, we need to patch it
> Create download dir for BOBVERSION
> Output a final report about what worked and what not
> Compile packages which need sysinfo.gap link changed
> Copy startup scripts to targetdir
> Add make workspace: need better sh?
> Check for 32-bit-compilation working on 64-bit
> kbmag needs -m32 on 64-bit
> sort out sh argument string containing strings in " with spaces
>   --> then fix kbmag using -O2 with -m32
> determine GAParchs, when?
> xgap: fix tests for X11
> xgap: copy scripts out (between compiles)
> anupq: need to distinguish OS, existence of gmp and have to use 32-bit
> Gauss: needs fixing --> new version
> Compile and finish web page
> cpscripts and workspace should execute regardless
> do not download xgap
> better say why xgap fails and what it needs
> better say for what component we are checking prerequisites
> better say that we check for -m32
> carat needs gmp? add a check --> no, but why does it not work on Debian64?
> store actual commands issued in build.log
> ask before deleting existing gap4r5 dir
> take basename of args[0] instead of current dir
> add support for xz compression
> test password protected download
> wrap in tar.gz on Linux
> wrap with Reimer's Applescript and dmg on Mac
> only do 32-bit on Mac
> make cd command which logs that it was done, maybe mkdir command?
> add -I and -L to CFLAGS and LDFLAGS on Mac for /usr/local:/sw:/opt/local:/opt
> detect Linux variant by some heuristics
> direxists function
> add to CFLAGS on OSX only if exists
> component GAP: move CFLAGS to COPTS and LDFLAGS to LOPTS, 
| clear CFLAGS and LDFLAGS
> see whether or not this works with ABI=32
> check for libreadline and warn if not there
> detect Mac installer variant by some heuristics
> detect 64bit and 32bit deps separately for Browse at least and act accordingly
> Add primitive editing support
> Patch fplsa
> Patch carat
> rename dmgdir
> Add hint about spaces in filenames to web page
> Make README for archives
> collect rpm hints
>   http://fr2.rpmfind.net/linux/rpm2html
> find readline library explicitly?
>   --> use --with-readline= if either ports of current homebrew is
>       there for 64-bit compile
> xz with -9, change sha1sum in link file
> change fplsa patch --> makefile
> -march test and usage
> find macports hints
> find more homebrew hints
> bump version number to 9
> union of macports hints for Mac
> union of homebrew hints? no
> union of debian hints
> union of rpm hints
> compile all
> update web page
> report fr problems
> report fink 32bit problems
remove gsl dependency in fr, print warning if released version
> qaos --> no, no C-part
> linboxing --> not for the time being.
> citrus --> done
> print CFLAGS and LDFLAGS chosen, set CXXFLAGS
read off fink path from executable
add fink hints
add /usr/X11 on OS X to CFLAGS and LDFLAGS and CXXFLAGS
Look through Max's email
recompile and publish
> copyright/GPL



Future:

> linboxing --> not for the time being.
test with fedora
union of emerge hints
collect emerge hints
look into spaces in filenames
homology package?
compile linboxing
look through LoadAllPackages to find further packages to compile
implement optional components
test in chroot prison?
pargap???
exclude some components   -x
selfupdate
Implement test for C++ compiler
More tests?
optional libsingular


Publish info about debian-like systems:

apt-get install build-essential

Basic:

apt-get install gcc make m4 libc6-dev libreadline-dev

for packages (including xgap):

apt-get install libgsl0-dev libx11-dev libxt-dev libxaw7-dev libgmp3-dev libncurses-dev

for fr:

apt-get install free-java-sdk

for -m32 on a 64-bit machine:

apt-get install ia32-libs libc6-dev-i386 lib32ncurses5-dev lib32readline5-dev

